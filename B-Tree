#include <iostream>
#include <string>
#include <cstring>

using namespace std;


struct student {
	int ID;			//0
	string name;	//1
	
	//friend istream& operator >>(istream& s, student& u) {
		// read in a user from disk
	//}

};

template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
class BTreeNode
{
	Record *keys;  // An array of keys
	BTreeNode **C; // An array of child pointers
	int n;     // Current number of keys
	bool leaf; // Is true when node is leaf. Otherwise false

public:
	BTreeNode(bool _leaf); 
	void traverse();
	BTreeNode *search(const PrimaryKeyType &k);

	int findKey(const PrimaryKeyType &k);

	void insertNonFull(const Record &k);
	void splitChild(int i, BTreeNode *y);

	void remove(const Record &k);
	void removeFromLeaf(int idx);
	void removeFromNonLeaf(int idx);
	const Record& getPred(int idx);	
	const Record& getSucc(int idx);	
	void fill(int idx);
	void borrowFromPrev(int idx);
	void borrowFromNext(int idx);
	void merge(int idx);


	template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
	friend class BTree;		//maybe move inside BTree
};

constexpr uint32_t blocksize = 1024;		//TODO: confirm block size and change formula bc we may have assumed t was max size instead of min
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
class BTree
{
	BTreeNode<Record, PrimaryKeyType, PrimaryKey> *root;
		
public:
	constexpr static uint32_t rec_per_block = blocksize / sizeof(Record);
	void remove(const Record &k);
	void insert(const Record &k);
	BTreeNode<Record, PrimaryKeyType, PrimaryKey>* search(PrimaryKeyType k) {
		return root->search(k);
	}

	BTree(): root(new BTreeNode<Record, PrimaryKeyType, PrimaryKey>(true)) { //1k/size of student instead of t	
		
	}
	   	 
	void traverse() {
		root->traverse();
	}

};

template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
BTreeNode<Record, PrimaryKeyType, PrimaryKey>::BTreeNode(bool leaf):leaf(leaf), n(0) {
	keys = new Record[2 * BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1];
	C = new BTreeNode *[2 * BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block];
	
}

template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
int BTreeNode<Record, PrimaryKeyType, PrimaryKey>::findKey(const PrimaryKeyType &k)
{
	int idx = 0;
	while (idx < n && keys[idx].*PrimaryKey < k)
		++idx;
	return idx;
}

template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::remove(const Record &k)
{
	int idx = findKey(k.*PrimaryKey);

	if (idx < n && keys[idx].*PrimaryKey == k.*PrimaryKey) {
		if (leaf)
			removeFromLeaf(idx);
		else
			removeFromNonLeaf(idx);
	}
	else {
		if (leaf) {
			cout << "The key does not exist in the tree\n";
			return;
		}

		bool flag = ((idx == n) ? true : false);

		if (C[idx]->n < BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block)
			fill(idx);
		if (flag && idx > n)
			C[idx - 1]->remove(k);
		else
			C[idx]->remove(k);
	}
	return;
}

template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::removeFromLeaf(int idx) {
	for (int i = idx + 1; i < n; ++i)
		keys[i - 1] = keys[i];
	n--;
	return;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType,PrimaryKey>::removeFromNonLeaf(int idx) {
	const Record& k = keys[idx];
	if (C[idx]->n >= BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block) {
		const Record& pred = getPred(idx);
		keys[idx] = pred;
		C[idx]->remove(pred);
	}

	else if (C[idx + 1]->n >= BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block) {
		const Record& succ = getSucc(idx);
		keys[idx] = succ;
		C[idx + 1]->remove(succ);
	}

	else {
		merge(idx);
		C[idx]->remove(k);
	}
	return;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
const Record& BTreeNode<Record, PrimaryKeyType, PrimaryKey>::getPred(int idx) {
	BTreeNode *cur = C[idx];
	while (!cur->leaf)
		cur = cur->C[cur->n];

	return cur->keys[cur->n - 1];
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
const Record& BTreeNode<Record, PrimaryKeyType, PrimaryKey>::getSucc(int idx) {

	BTreeNode *cur = C[idx + 1];
	while (!cur->leaf)
		cur = cur->C[0];

	return cur->keys[0];
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::fill(int idx) {

	if (idx != 0 && C[idx - 1]->n >= BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block)
		borrowFromPrev(idx);

	else if (idx != n && C[idx + 1]->n >= BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block)
		borrowFromNext(idx);

	else {
		if (idx != n)
			merge(idx);
		else
			merge(idx - 1);
	}
	return;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::borrowFromPrev(int idx) {
	BTreeNode *child = C[idx];
	BTreeNode *sibling = C[idx - 1];

	for (int i = child->n - 1; i >= 0; --i)
		child->keys[i + 1] = child->keys[i];

	if (!child->leaf) {
		for (int i = child->n; i >= 0; --i)
			child->C[i + 1] = child->C[i];
	}

	child->keys[0] = keys[idx - 1];

	if (!child->leaf)
		child->C[0] = sibling->C[sibling->n];

	keys[idx - 1] = sibling->keys[sibling->n - 1];

	child->n += 1;
	sibling->n -= 1;

	return;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::borrowFromNext(int idx) {
	BTreeNode *child = C[idx];
	BTreeNode *sibling = C[idx + 1];

	child->keys[(child->n)] = keys[idx];

	if (!(child->leaf))
		child->C[(child->n) + 1] = sibling->C[0];

	keys[idx] = sibling->keys[0];

	for (int i = 1; i < sibling->n; ++i)
		sibling->keys[i - 1] = sibling->keys[i];

	if (!sibling->leaf) {
		for (int i = 1; i <= sibling->n; ++i)
			sibling->C[i - 1] = sibling->C[i];
	}

	child->n += 1;
	sibling->n -= 1;
	return;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::merge(int idx) {
	BTreeNode *child = C[idx];
	BTreeNode *sibling = C[idx + 1];

	child->keys[BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1] = keys[idx];
	for (int i = 0; i < sibling->n; ++i)
		child->keys[i + BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block] = sibling->keys[i];

	if (!child->leaf) {
		for (int i = 0; i <= sibling->n; ++i)
			child->C[i + BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block] = sibling->C[i];
	}

	for (int i = idx + 1; i < n; ++i)
		keys[i - 1] = keys[i];

	for (int i = idx + 2; i <= n; ++i)
		C[i - 1] = C[i];

	child->n += sibling->n + 1;
	n--;
	delete(sibling);
	return;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTree<Record, PrimaryKeyType, PrimaryKey>::insert(const Record &k) {

	if (root->n == 0) {
		
		root->keys[0] = k;
		root->n = 1;
	}
	else {
		if (root->n == 2 * rec_per_block - 1) {
			BTreeNode<Record, PrimaryKeyType,PrimaryKey>*s = new BTreeNode<Record, PrimaryKeyType, PrimaryKey>(false);
			s->C[0] = root;
			s->splitChild(0, root);

			int i = 0;
			if (s->keys[0].*PrimaryKey < k.*PrimaryKey)
				i++;
			s->C[i]->insertNonFull(k);
			root = s;
		}
		else
			root->insertNonFull(k);
	}
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::insertNonFull(const Record &k) {

	int i = n - 1;
	if (leaf == true) {
		while (i >= 0 && keys[i].*PrimaryKey > k.*PrimaryKey) {
			keys[i + 1] = keys[i];
			i--;
		}

		keys[i + 1] = k;
		n = n + 1;
	}
	else {
		while (i >= 0 && keys[i].*PrimaryKey > k.*PrimaryKey)
			i--;

		if (C[i + 1]->n == 2 * BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1) {
			splitChild(i + 1, C[i + 1]);

			if (keys[i + 1].*PrimaryKey < k.*PrimaryKey)
				i++;
		}
		C[i + 1]->insertNonFull(k);
	}
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::splitChild(int i, BTreeNode *y) {
	BTreeNode *z = new BTreeNode(y->leaf);
	z->n = BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1;

	for (int j = 0; j < BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1; j++)
		z->keys[j] = y->keys[j + BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block];

	if (y->leaf == false) {
		for (int j = 0; j < BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block; j++)
			z->C[j] = y->C[j + BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block];
	}
	y->n = BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1;

	for (int j = n; j >= i + 1; j--)
		C[j + 1] = C[j];

	C[i + 1] = z;

	for (int j = n - 1; j >= i; j--)
		keys[j + 1] = keys[j];

	keys[i] = y->keys[BTree<Record, PrimaryKeyType, PrimaryKey>::rec_per_block - 1];
	n = n + 1;
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTreeNode<Record, PrimaryKeyType, PrimaryKey>::traverse() {
	int i;
	for (i = 0; i < n; i++) {
		if (leaf == false)
			C[i]->traverse();
		cout << " (" << keys[i].ID << "," << keys[i].name << ")";
	}

	if (leaf == false)
		C[i]->traverse();
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
BTreeNode<Record, PrimaryKeyType, PrimaryKey> *BTreeNode<Record, PrimaryKeyType, PrimaryKey>::search(const PrimaryKeyType &k) {
	int i = 0;
	while (i < n && k > keys[i].*PrimaryKey)
		i++;

	if (keys[i].*PrimaryKey == k)
		return this;

	if (leaf == true)
		return NULL;

	return C[i]->search(k);
}
template<typename Record, typename PrimaryKeyType, PrimaryKeyType Record::*PrimaryKey>
void BTree<Record, PrimaryKeyType, PrimaryKey>::remove(const Record &k) {		// TODO: possibly change to int k if that makes UI more efficient
	if (!root) {
		cout << "The tree is empty\n";
		return;
	}
	root->remove(k);

	if (root->n == 0) {
		BTreeNode <Record, PrimaryKeyType, PrimaryKey> *tmp = root;
		if (root->leaf)
			root->n = 0;
		else
			root = root->C[0];
		delete tmp;
	}
	return;
}

int main() {
	//BTree<student, int, &student::ID> t;
	BTree<student, string, &student::name> t;
	
	t.insert({ 1, "Bob" });
	t.insert({ 3, "Steve" });
	t.insert({ 7, "Phil" });
	t.insert({ 10, "Zack" });
	t.insert({ 11, "Rick" });
	t.insert({ 13, "Mike" });
	t.insert({ 14, "Todd" });
	t.insert({ 15, "Will" });
	t.insert({ 18, "Jason" });
	t.insert({ 16, "Kevin" });
	t.insert({ 19, "Bill" });
	t.insert({ 24, "Anthony" });
	t.insert({ 25, "Kate" });
	t.insert({ 26, "Joe" });
	t.insert({ 21, "Alex" });
	t.insert({ 4, "Jen" });
	t.insert({ 5, "Matt" });
	t.insert({ 20, "Danny" });
	t.insert({ 22, "Jack" });
	t.insert({ 2, "Gill" });
	t.insert({ 17, "Evan" });
	t.insert({ 12, "Ian" });
	t.insert({ 6, "Chris" });
	
	cout << "Traversal of tree constructed is\n";
	t.traverse();
	cout << endl;

	t.remove({ 6, "Chris" });
	cout << "Traversal of tree after removing 6\n";
	t.traverse();
	cout << endl;

	t.remove({ 13, "Mike" });
	cout << "Traversal of tree after removing 13\n";
	t.traverse();
	cout << endl;

	t.remove({ 7, "Phil" });
	cout << "Traversal of tree after removing 7\n";
	t.traverse();
	cout << endl;

	t.remove({ 4, "Jen" });
	cout << "Traversal of tree after removing 4\n";
	t.traverse();
	cout << endl;

	t.remove({ 2, "Gia" });
	cout << "Traversal of tree after removing 2\n";
	t.traverse();
	cout << endl;

	t.remove({ 16, "Kevin" });
	cout << "Traversal of tree after removing 16\n";
	t.traverse();
	cout << endl;
	
	
	system("pause");
	return 0;
}
