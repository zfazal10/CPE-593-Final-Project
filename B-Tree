#include<iostream>
#include<string>
#include<cstring>
using namespace std;


struct student {
	int ID;			//0
	string name;	//1
	
	//friend istream& operator >>(istream& s, student& u) {
		// read in a user from disk
	//}

};

template<typename Record, typename PrimaryKey>
class BTreeNode
{
	student *keys;  // An array of keys
	int t;      // Minimum degree (defines the range for number of keys)
	BTreeNode **C; // An array of child pointers
	int n;     // Current number of keys
	bool leaf; // Is true when node is leaf. Otherwise false
	int prim_index;

public:
	BTreeNode(int _t, bool _leaf, int prim_index); 
	void traverse();
	BTreeNode *search(PrimaryKey k);

	int findKey(PrimaryKey k);
	PrimaryKey getVal(student current);

	void insertNonFull(student k);
	void splitChild(int i, BTreeNode *y);

	void remove(student k);
	void removeFromLeaf(int idx);
	void removeFromNonLeaf(int idx);
	student getPred(int idx);
	student getSucc(int idx);
	void fill(int idx);
	void borrowFromPrev(int idx);
	void borrowFromNext(int idx);
	void merge(int idx);

	template<typename Record, typename PrimaryKey>
	friend class BTree;
};

template<typename Record, typename PrimaryKey>
class BTree
{
	BTreeNode<Record, PrimaryKey> *root;
	int t;
	int prim_index;
	
public:

	void remove(student k);
	void insert(student k);
	BTreeNode<Record, PrimaryKey>* search(PrimaryKey k) {
		return (root == NULL) ? NULL : root->search(k);
	}

	BTree(int _t, int _prim_index) {
		root = NULL;
		t = _t;
		prim_index = _prim_index;
	}
	   	 
	void traverse() {
		if (root != NULL) root->traverse();
	}

	PrimaryKey getVal(student current);
};

template<typename Record, typename PrimaryKey>
BTreeNode<Record, PrimaryKey>::BTreeNode(int t1, bool leaf1, int prim_index1) {
	t = t1;
	leaf = leaf1;
	keys = new student[2 * t - 1];
	C = new BTreeNode *[2 * t];
	n = 0;
	prim_index = prim_index1;
}

template<typename Record, typename PrimaryKey>
PrimaryKey BTreeNode<Record, PrimaryKey>::getVal(student current) {		//make void?
	
	try {
		
		student *ptr = &current;
		PrimaryKey *address;
		ptr = (student*)((unsigned char*)ptr);
		//unsigned char *num = reinterpret_cast<unsigned char*>(ptr);
		//num += 4;
		address = (PrimaryKey*)(ptr);
		cout << current.ID << ":		:  " << *address << endl;
		return *address;
	}
	catch (const std::bad_alloc&) {
	
		cout << "error " << current.ID << endl;
		return current.ID;
	}
}


template<typename Record, typename PrimaryKey>
int BTreeNode<Record, PrimaryKey>::findKey(PrimaryKey k)
{
	int idx = 0;
	while (idx < n && getVal(keys[idx]) < k)	
		++idx;
	return idx;
}

template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::remove(student k)
{
	int idx = findKey(getVal(k));

	if (idx < n && getVal(keys[idx]) == getVal(k)) {
		if (leaf)
			removeFromLeaf(idx);
		else
			removeFromNonLeaf(idx);
	}
	else {
		if (leaf) {
			cout << "The key " << getVal(k) << " is does not exist in the tree\n";
			return;
		}

		bool flag = ((idx == n) ? true : false);

		if (C[idx]->n < t)
			fill(idx);
		if (flag && idx > n)
			C[idx - 1]->remove(k);
		else
			C[idx]->remove(k);
	}
	return;
}

template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::removeFromLeaf(int idx) {
	for (int i = idx + 1; i < n; ++i)
		keys[i - 1] = keys[i];
	n--;
	return;
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::removeFromNonLeaf(int idx) {
	student k = keys[idx];
	if (C[idx]->n >= t) {
		student pred = getPred(idx);
		keys[idx] = pred;
		C[idx]->remove(pred);
	}

	else if (C[idx + 1]->n >= t) {
		student succ = getSucc(idx);
		keys[idx] = succ;
		C[idx + 1]->remove(succ);
	}

	else {
		merge(idx);
		C[idx]->remove(k);
	}
	return;
}
template<typename Record, typename PrimaryKey>
student BTreeNode<Record, PrimaryKey>::getPred(int idx) {
	BTreeNode *cur = C[idx];
	while (!cur->leaf)
		cur = cur->C[cur->n];

	return cur->keys[cur->n - 1];
}
template<typename Record, typename PrimaryKey>
student BTreeNode<Record, PrimaryKey>::getSucc(int idx) {

	BTreeNode *cur = C[idx + 1];
	while (!cur->leaf)
		cur = cur->C[0];

	return cur->keys[0];
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::fill(int idx) {

	if (idx != 0 && C[idx - 1]->n >= t)
		borrowFromPrev(idx);

	else if (idx != n && C[idx + 1]->n >= t)
		borrowFromNext(idx);

	else {
		if (idx != n)
			merge(idx);
		else
			merge(idx - 1);
	}
	return;
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::borrowFromPrev(int idx) {
	BTreeNode *child = C[idx];
	BTreeNode *sibling = C[idx - 1];

	for (int i = child->n - 1; i >= 0; --i)
		child->keys[i + 1] = child->keys[i];

	if (!child->leaf) {
		for (int i = child->n; i >= 0; --i)
			child->C[i + 1] = child->C[i];
	}

	child->keys[0] = keys[idx - 1];

	if (!child->leaf)
		child->C[0] = sibling->C[sibling->n];

	keys[idx - 1] = sibling->keys[sibling->n - 1];

	child->n += 1;
	sibling->n -= 1;

	return;
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::borrowFromNext(int idx) {
	BTreeNode *child = C[idx];
	BTreeNode *sibling = C[idx + 1];

	child->keys[(child->n)] = keys[idx];

	if (!(child->leaf))
		child->C[(child->n) + 1] = sibling->C[0];

	keys[idx] = sibling->keys[0];

	for (int i = 1; i < sibling->n; ++i)
		sibling->keys[i - 1] = sibling->keys[i];

	if (!sibling->leaf) {
		for (int i = 1; i <= sibling->n; ++i)
			sibling->C[i - 1] = sibling->C[i];
	}

	child->n += 1;
	sibling->n -= 1;
	return;
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::merge(int idx) {
	BTreeNode *child = C[idx];
	BTreeNode *sibling = C[idx + 1];

	child->keys[t - 1] = keys[idx];
	for (int i = 0; i < sibling->n; ++i)
		child->keys[i + t] = sibling->keys[i];

	if (!child->leaf) {
		for (int i = 0; i <= sibling->n; ++i)
			child->C[i + t] = sibling->C[i];
	}

	for (int i = idx + 1; i < n; ++i)
		keys[i - 1] = keys[i];

	for (int i = idx + 2; i <= n; ++i)
		C[i - 1] = C[i];

	child->n += sibling->n + 1;
	n--;
	delete(sibling);
	return;
}
template<typename Record, typename PrimaryKey>
void BTree<Record, PrimaryKey>::insert(student k) {

	if (root == NULL) {
		root = new BTreeNode<Record, PrimaryKey>(t, true, prim_index);
		root->keys[0] = k;
		root->n = 1;
	}
	else {
		if (root->n == 2 * t - 1) {
			BTreeNode<Record, PrimaryKey>*s = new BTreeNode<Record, PrimaryKey>(t, false, prim_index);
			s->C[0] = root;
			s->splitChild(0, root);

			int i = 0;
			if (s->keys[0].ID < k.ID)		//ees ok?	no. finxxxxxxxxxxxxxxxx
				i++;
			s->C[i]->insertNonFull(k);
			root = s;
		}
		else
			root->insertNonFull(k);
	}
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::insertNonFull(student k) {

	int i = n - 1;
	if (leaf == true) {
		while (i >= 0 && getVal(keys[i]) > getVal(k)) {
			keys[i + 1] = keys[i];
			i--;
		}

		keys[i + 1] = k;
		n = n + 1;
	}
	else {
		while (i >= 0 && getVal(keys[i]) > getVal(k))
			i--;

		if (C[i + 1]->n == 2 * t - 1) {
			splitChild(i + 1, C[i + 1]);

			if (getVal(keys[i + 1]) < getVal(k))
				i++;
		}
		C[i + 1]->insertNonFull(k);
	}
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::splitChild(int i, BTreeNode *y) {
	BTreeNode *z = new BTreeNode(y->t, y->leaf, y->prim_index);
	z->n = t - 1;

	for (int j = 0; j < t - 1; j++)
		z->keys[j] = y->keys[j + t];

	if (y->leaf == false) {
		for (int j = 0; j < t; j++)
			z->C[j] = y->C[j + t];
	}
	y->n = t - 1;

	for (int j = n; j >= i + 1; j--)
		C[j + 1] = C[j];

	C[i + 1] = z;

	for (int j = n - 1; j >= i; j--)
		keys[j + 1] = keys[j];

	keys[i] = y->keys[t - 1];
	n = n + 1;
}
template<typename Record, typename PrimaryKey>
void BTreeNode<Record, PrimaryKey>::traverse() {
	int i;
	for (i = 0; i < n; i++) {
		if (leaf == false)
			C[i]->traverse();
		cout << " (" << keys[i].ID << "," << keys[i].name << ")";
	}

	if (leaf == false)
		C[i]->traverse();
}
template<typename Record, typename PrimaryKey>
BTreeNode<Record, PrimaryKey> *BTreeNode<Record, PrimaryKey>::search(PrimaryKey k) {
	int i = 0;
	while (i < n && k > getVal(keys[i]))
		i++;

	if (getVal(keys[i]) == k)
		return this;

	if (leaf == true)
		return NULL;

	return C[i]->search(k);
}
template<typename Record, typename PrimaryKey>
void BTree<Record, PrimaryKey>::remove(student k) {		// TODO: possibly change to int k if that makes UI more efficient, without sacrificing complexity************************
	if (!root) {
		cout << "The tree is empty\n";
		return;
	}
	root->remove(k);

	if (root->n == 0) {
		BTreeNode <Record, PrimaryKey> *tmp = root;
		if (root->leaf)
			root = NULL;
		else
			root = root->C[0];
		delete tmp;
	}
	return;
}
//template<typename Record, typename PrimaryKey>
int main() {
	BTree<int, int> t(3, 0);
	
	/* char array instead of string
	t.insert({ 1, {'B', 'o', 'b', 'b'}});
	t.insert({ 3, {'S', 'e', 'v', 'e'}});
	t.insert({ 7,{'P', 'h', 'i', 'l' }});
	t.insert({ 9,{'Z', 'a', 'c', 'k' }});
	t.insert({ 8,{'H', 'i', 'r', 'o' }});
	t.insert({ 4,{'M', 'i', 'k', 'e' }});
	t.insert({ 2,{'T', 'o', 'd', 'd' }});
	t.insert({ 5,{'W', 'i', 'l', 'l' }});
	t.insert({ 10,{'J', 'a', 'y', ' '}});
	t.insert({ 6,{'K', 'e', 'v', ' '}});

	t.remove({ 6,{'K', 'e', 'v', ' '}});
	cout << "Traversal of tree after removing 6\n";
	t.traverse();
	cout << endl;

	t.remove({ 10,{'J', 'a', 'y', ' '} });
	cout << "Traversal of tree after removing 10\n";
	t.traverse();
	cout << endl;

	t.remove({ 5, {'W', 'i', 'l', 'l'}});
	cout << "Traversal of tree after removing 5\n";
	t.traverse();
	cout << endl;
	*/



	/* class instead of struct
	student a;
	a.ID = 1;
	a.name = "Bob";

	student b;
	a.ID = 4;
	a.name = "Steve";

	student c;
	a.ID = 2;
	a.name = "Ella";

	student d;
	a.ID = 6;
	a.name = "Zack";

	student e;
	a.ID = 5;
	a.name = "Will";

	student f;
	a.ID = 3;
	a.name = "Kate";

	student g;
	a.ID = 7;
	a.name = "Mike";

	t.insert(a);
	t.insert(b);
	t.insert(c);
	t.insert(d);
	t.insert(e);
	t.insert(f);
	t.insert(g);
	
	cout << "Traversal of tree constructed is\n";
	t.traverse();
	cout << endl;

	t.remove(e);
	cout << "Traversal of tree after removing Will\n";
	t.traverse();
	cout << endl;
	*/
	
	t.insert({ 1, "Bob" });
	t.insert({ 3, "Steve" });
	t.insert({ 7, "Phil" });
	t.insert({ 10, "Zack" });
	t.insert({ 11, "Hiroki" });
	t.insert({ 13, "Mike" });
	t.insert({ 14, "Todd" });
	t.insert({ 15, "Will" });
	t.insert({ 18, "Jason" });
	t.insert({ 16, "Kevin" });
	t.insert({ 19, "Avi" });
	t.insert({ 24, "Anthony" });
	t.insert({ 25, "Kate" });
	t.insert({ 26, "Ariana" });
	t.insert({ 21, "Alex" });
	t.insert({ 4, "Jen" });
	t.insert({ 5, "Matt" });
	t.insert({ 20, "Danny" });
	t.insert({ 22, "Jack" });
	t.insert({ 2, "Gia" });
	t.insert({ 17, "Evan" });
	t.insert({ 12, "Boris" });
	t.insert({ 6, "Nadia" });
	
	cout << "Traversal of tree constructed is\n";
	t.traverse();
	cout << endl;

	t.remove({ 6, "Nadia" });
	cout << "Traversal of tree after removing 6\n";
	t.traverse();
	cout << endl;

	t.remove({ 13, "Mike" });
	cout << "Traversal of tree after removing 13\n";
	t.traverse();
	cout << endl;

	t.remove({ 7, "Phil" });
	cout << "Traversal of tree after removing 7\n";
	t.traverse();
	cout << endl;

	t.remove({ 4, "Jen" });
	cout << "Traversal of tree after removing 4\n";
	t.traverse();
	cout << endl;

	t.remove({ 2, "Gia" });
	cout << "Traversal of tree after removing 2\n";
	t.traverse();
	cout << endl;

	t.remove({ 16, "Kevin" });
	cout << "Traversal of tree after removing 16\n";
	t.traverse();
	cout << endl;
	
	
	system("pause");
	return 0;
}
